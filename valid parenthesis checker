class Solution {
    /*
    bool func(string s, int ind, int cnt, int n){
        if (cnt<0) return false;
        if (ind==n) return cnt==0;
        if (s[ind]=='(') return func(s, ind+1, cnt+1, n);
        if (s[ind]==')') return func(s, ind+1, cnt-1, n);
        return func(s, ind+1, cnt+1, n) || func(s, ind+1, cnt-1, n) || func(s, ind+1, cnt, n);
    }
    */
public:
    bool checkValidString(string s) {
        /*
        // 1. recursion, can use memoization, tabulation and space optimized using dp
        // TC : O(3^n)
        // SC : O(n)
        return func(s, 0, 0, s.length());
        */
        int mini=0, maxi=0;
        int n=s.length();
        for(int i=0;i<n;i++){
            if (s[i]=='('){
                mini+=1;
                maxi+=1;
            }
            else if (s[i]==')'){
                mini-=1;
                maxi-=1;
            }
            else{
                mini-=1;
                maxi+=1;

            }
            if (mini<0) mini=0;
            if (maxi<0) return false;
        }
        return mini==0;
    }
};
