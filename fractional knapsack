// fractional knapsack

#include <bits/stdc++.h>
using namespace std;

struct Item {
    int value;
    int weight;
};

class Solution {
public:
    // Comparator function for sorting items by value/weight ratio
    static bool comp(Item a, Item b) {
        double r1 = (double)a.value / a.weight;
        double r2 = (double)b.value / b.weight;
        return r1 > r2;
    }

    // Function to get the maximum value in a fractional knapsack
    double fractionalKnapsack(int W, vector<Item>& arr) {
        // TC : loop->O(n)+)(nlogn)<-sorting
        // SC : O(1)
        sort(arr.begin(), arr.end(), comp);

        int curWeight = 0;
        double finalvalue = 0.0;

        for (int i = 0; i < arr.size(); i++) {
            if (curWeight + arr[i].weight <= W) {
                curWeight += arr[i].weight;
                finalvalue += arr[i].value;
            } else {
                int remain = W - curWeight;
                finalvalue += (arr[i].value / (double)arr[i].weight) * remain;
                break;
            }
        }

        return finalvalue;
    }
};

int main() {
    int weight = 50;
    vector<Item> arr = {{100, 20}, {60, 10}, {120, 30}};
    
    Solution obj;
    double ans = obj.fractionalKnapsack(weight, arr);

    cout << "The maximum value is " << fixed << setprecision(2) << ans << endl;
    return 0;
}
